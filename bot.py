import json
import random
import re
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import CommandStart, Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
import asyncio

API_TOKEN = '8310792022:AAEo3e1kf2CZRr67PsUdMiIdYsjaCsgw2TA'
ADMIN_ID = 6382960258  # —Ç–≤–æ–π ID

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–Ω—Ñ–∏–∫–∏
try:
    with open("fanfics.json", "r", encoding="utf-8") as f:
        FANFICS = json.load(f)
except FileNotFoundError:
    FANFICS = {}

def save_fanfics():
    with open("fanfics.json", "w", encoding="utf-8") as f:
        json.dump(FANFICS, f, ensure_ascii=False, indent=2)

# FSM –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–Ω—Ñ–∏–∫–∞
class AddFanfic(StatesGroup):
    waiting_for_title = State()
    waiting_for_text = State()

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer(
        "üìö –í—ã–±–µ—Ä–∏ —Ä–∞—Å—Å–∫–∞–∑:",
        reply_markup=get_fanfic_keyboard(user_id=message.from_user.id)
    )

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (c —É—á—ë—Ç–æ–º –∞–¥–º–∏–Ω–∞)
def get_fanfic_keyboard(user_id: int | None = None):
    keyboard = [
        [InlineKeyboardButton(text=title, callback_data=f"fanfic:{i}")]
        for i, title in enumerate(FANFICS)
    ]
    keyboard.append([InlineKeyboardButton(text="üé≤ –†–∞–Ω–¥–æ–º", callback_data="random")])

    # –ê–¥–º–∏–Ω—Å–∫–∞—è –∫–Ω–æ–ø–∫–∞ –≤–∏–¥–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—É
    if user_id == ADMIN_ID:
        keyboard.append([InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–Ω—Ñ–∏–∫", callback_data="addfanfic")])

    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–Ω—Ñ–∏–∫–∞
@dp.callback_query(F.data.startswith("fanfic:"))
async def handle_fanfic_selection(callback: CallbackQuery):
    index = int(callback.data.split(":")[1])
    title = list(FANFICS.keys())[index]
    phrase = random.choice(FANFICS[title])
    await callback.message.answer(
        f"üìñ *{title}*\n\n_{phrase}_",
        parse_mode="Markdown",
        reply_markup=get_after_prediction_keyboard(index)
    )

# –ö–Ω–æ–ø–∫–∞ "–†–∞–Ω–¥–æ–º"
@dp.callback_query(F.data == "random")
async def handle_random(callback: CallbackQuery):
    if not FANFICS:
        await callback.message.answer("üìÇ –ù–µ—Ç —Ä–∞—Å—Å–∫–∞–∑–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞.")
        return
    index = random.randrange(len(FANFICS))
    title = list(FANFICS.keys())[index]
    phrase = random.choice(FANFICS[title])
    await callback.message.answer(
        f"üé≤ *{title}*\n\n_{phrase}_",
        parse_mode="Markdown",
        reply_markup=get_after_prediction_keyboard(index)
    )

# –ö–Ω–æ–ø–∫–∏ –ø–æ–¥ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ–º
def get_after_prediction_keyboard(index):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÅ –î—Ä—É–≥–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ", callback_data=f"again:{index}")],
        [InlineKeyboardButton(text="üìö –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ä–∞—Å—Å–∫–∞–∑", callback_data="back")]
    ])

@dp.callback_query(F.data.startswith("again:"))
async def handle_again(callback: CallbackQuery):
    index = int(callback.data.split(":")[1])
    title = list(FANFICS.keys())[index]
    phrase = random.choice(FANFICS[title])
    await callback.message.answer(
        f"üîÆ *{title}*\n\n_{phrase}_",
        parse_mode="Markdown",
        reply_markup=get_after_prediction_keyboard(index)
    )

@dp.callback_query(F.data == "back")
async def handle_back(callback: CallbackQuery):
    await callback.message.answer(
        "üìö –í—ã–±–µ—Ä–∏ —Ä–∞—Å—Å–∫–∞–∑:",
        reply_markup=get_fanfic_keyboard(user_id=callback.from_user.id)
    )

# –ö–æ–º–∞–Ω–¥–∞ /addfanfic (–ø–æ-–ø—Ä–µ–∂–Ω–µ–º—É —Ä–∞–±–æ—Ç–∞–µ—Ç)
@dp.message(Command("addfanfic"))
async def cmd_addfanfic(message: Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        return await message.answer("‚õî –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    await state.set_state(AddFanfic.waiting_for_title)
    await message.answer("‚úçÔ∏è –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ä–∞–±–æ—Ç—ã:")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ö–ù–û–ü–ö–ò "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–Ω—Ñ–∏–∫"
@dp.callback_query(F.data == "addfanfic")
async def cb_addfanfic(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id != ADMIN_ID:
        return await callback.message.answer("‚õî –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    await state.set_state(AddFanfic.waiting_for_title)
    await callback.message.answer("‚úçÔ∏è –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ä–∞–±–æ—Ç—ã:")

@dp.message(AddFanfic.waiting_for_title)
async def get_title(message: Message, state: FSMContext):
    title = message.text.strip()
    if title in FANFICS:
        await message.answer("‚ùó –¢–∞–∫–∞—è —Ä–∞–±–æ—Ç–∞ —É–∂–µ –µ—Å—Ç—å. –í–≤–µ–¥–∏ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
        return
    await state.update_data(title=title)
    await state.set_state(AddFanfic.waiting_for_text)
    await message.answer("üìú –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ —Ç–µ–∫—Å—Ç ‚Äî –≤—Å—ë –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n–ë–æ—Ç —Å–∞–º —Ä–∞–∑–æ–±—å—ë—Ç –µ–≥–æ –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.")

@dp.message(AddFanfic.waiting_for_text)
async def get_text(message: Message, state: FSMContext):
    data = await state.get_data()
    title = data["title"]
    text = message.text.strip()
    sentences = re.split(r'(?<=[.!?])\s+', text)
    sentences = [s.strip() for s in sentences if s.strip()]
    FANFICS[title] = sentences
    save_fanfics()
    await message.answer(
        f"‚úÖ –†–∞–±–æ—Ç–∞ *{title}* —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! –î–æ–±–∞–≤–ª–µ–Ω–æ {len(sentences)} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.",
        parse_mode="Markdown"
    )
    await state.clear()

# –ó–∞–ø—É—Å–∫
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
